compiler:
  compilers:
    cc: {program: mpicc}
    cxx: {program: mpicxx}
    f08: {program: mpifort}
    f77: {program: mpif77}
    f90: {program: mpif90}
    fc: {program: mpifort}
criterion:
  n_core:
    subtitle: c
    values: [1, 2, 5, 8]
  n_mpi:
    subtitle: n
    values: [1, 2, 3, 4]
  n_node:
    subtitle: N
    values: [1, 2, 3, 4]
machine: {concurrent_run: 4, cores_per_node: 4, name: localhost, nodes: 1}
runtime:
  criterions:
    n_core: {numeric: true, option: '-c '}
    n_mpi: {numeric: true, option: '-n '}
    n_node: {numeric: true, option: 'N '}
  plugin: "from pcvs.plugins import Plugin\n\n\nclass MPIPlugin(Plugin):\n    step
    = Plugin.Step.TEST_EVAL\n\n    def run(self, *args, **kwargs):\n        # returns
    True if the combination should be used\n        config = kwargs['config']\n        nb_nodes
    = config['machine'].get('nodes', 1)\n        nb_cores = config['machine'].get('cores_per_node',
    1)\n\n        comb = kwargs['combination']\n        n_mpi = comb.get('n_mpi',
    1)\n        # n_omp = comb.get('n_omp', 0)\n        n_node = comb.get('n_node',
    1)\n\n        if ((int(n_mpi / n_node) > nb_cores) or\n                (n_node
    > nb_nodes)):\n            return False\n        else:\n            return True\n"
  program: srun
